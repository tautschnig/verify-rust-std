- // MIR for `main` before GVN
+ // MIR for `main` after GVN
  
  fn main() -> () {
      let mut _0: ();
      let _1: A;
      let mut _2: std::boxed::Box<[bool]>;
      scope 1 {
          debug a => _1;
      }
      scope 2 (inlined <Box<[bool]> as Default>::default) {
          let _3: std::ptr::Unique<[bool]>;
          let mut _4: std::ptr::Unique<[bool; 0]>;
          scope 3 {
          }
          scope 4 (inlined Unique::<[bool; 0]>::dangling) {
              let mut _5: std::ptr::NonNull<[bool; 0]>;
              scope 5 (inlined NonNull::<[bool; 0]>::dangling) {
                  let _6: std::ptr::Alignment;
                  let mut _7: std::num::NonZero<usize>;
                  scope 6 {
                      scope 10 (inlined std::ptr::Alignment::as_nonzero) {
                          let mut _8: {closure@std::ptr::Alignment::as_nonzero::{closure#0}};
                          let mut _9: std::num::NonZero<usize>;
                          scope 11 {
                          }
                          scope 12 (inlined core::contracts::build_check_ensures::<NonZero<usize>, {closure@std::ptr::Alignment::as_nonzero::{closure#0}}>) {
                          }
                      }
                      scope 13 (inlined NonNull::<[bool; 0]>::without_provenance) {
                          let _10: *const [bool; 0];
                          scope 14 {
                          }
                          scope 15 (inlined NonZero::<usize>::get) {
                          }
                          scope 16 (inlined std::ptr::without_provenance::<[bool; 0]>) {
                              scope 17 (inlined without_provenance_mut::<[bool; 0]>) {
                              }
                          }
                      }
                  }
                  scope 7 (inlined std::ptr::Alignment::of::<[bool; 0]>) {
                      scope 8 {
                      }
                      scope 9 (inlined core::contracts::build_check_ensures::<std::ptr::Alignment, {closure@std::ptr::Alignment::of<[bool; 0]>::{closure#0}}>) {
                      }
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_4);
          StorageLive(_5);
          StorageLive(_6);
          _6 = contract_check_ensures::<{closure@std::ptr::Alignment::of<[bool; 0]>::{closure#0}}, std::ptr::Alignment>(const ZeroSized: {closure@std::ptr::Alignment::of<[bool; 0]>::{closure#0}}, const std::ptr::Alignment::of::<[bool; 0]>::{constant#0}) -> [return: bb2, unwind unreachable];
      }
  
      bb1: {
          StorageDead(_1);
          return;
      }
  
      bb2: {
          StorageLive(_7);
          StorageLive(_8);
          _8 = {closure@$SRC_DIR/core/src/ptr/alignment.rs:LL:COL} { 0: copy _6 };
          StorageLive(_9);
          _9 = copy _6 as std::num::NonZero<usize> (Transmute);
          _7 = contract_check_ensures::<{closure@std::ptr::Alignment::as_nonzero::{closure#0}}, NonZero<usize>>(move _8, move _9) -> [return: bb3, unwind unreachable];
      }
  
      bb3: {
          StorageDead(_9);
          StorageDead(_8);
          StorageLive(_10);
          _10 = copy _7 as *const [bool; 0] (Transmute);
          _5 = NonNull::<[bool; 0]> { pointer: copy _10 };
          StorageDead(_10);
          StorageDead(_7);
          StorageDead(_6);
          _4 = Unique::<[bool; 0]> { pointer: move _5, _marker: const PhantomData::<[bool; 0]> };
          StorageDead(_5);
          _3 = move _4 as std::ptr::Unique<[bool]> (PointerCoercion(Unsize, Implicit));
          StorageDead(_4);
          _2 = Box::<[bool]>(copy _3, const std::alloc::Global);
          StorageDead(_3);
          _1 = A { foo: move _2 };
          StorageDead(_2);
          _0 = const ();
          drop(_1) -> [return: bb1, unwind unreachable];
      }
  }
  
